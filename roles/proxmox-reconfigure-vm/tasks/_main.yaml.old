---
- name: Reset disks count
  set_fact:
    disks_count: 0

- name: Register the results of qm list
  shell: "qm list | awk '{print $2, $1}'"
  register: vm_list

- name: Load varible with results from qm list
  set_fact:
    vm_name: "{{ vm_name | combine( {item.split(' ')[0]: item.split(' ')[1]} ) }}"
  loop: "{{ vm_list.stdout_lines }}"

- name: Register the results of qm config
  shell: "qm config {{ vm_name[item.name] }}"
  loop: "{{ guest_host }}"
  register: vm_hardware

- name: Load varible with results from qm config
  set_fact:
    disks_count: "{{ disks_count | int + 1}}"
    disks_with_ints: "{{ disks_count }}"
  loop: "{{ vm_hardware | flatten }}.{{ stdout_lines }}"
#  when: "{{ disks_count | string is in inner_item and 'lvm' is in inner_item and 'cdrom' is not in inner_item }}"
  when: "{{ disks_count | string is in item and 'lvm' is in item }}"

- name: Reconfigure VM CPU and RAM
  shell: "qm set {{ vm_name[item.name] }} --sockets {{ item.sockets }} --memory {{ item.memory }} --cores {{ item.cores }}"
  loop: "{{ guest_host }}"

- name: Combine disks with numbers
  set_fact:
    disks_with_int: "{{ disks_with_int + [[disks_count, inner_item]]}}"
    disks_count: "{{ disks_count | int + 1 }}"
  loop: "{{ 'query('guest_host', 'hdd')' }}"

- name: Create disks
  shell: "pvesm alloc local-lvm {{ vm_name[item.name] }} '' {{ inner_item.1 }}"
  loop: "{{ disks_with_int }}"
  loop_control:
    loop_var: "inner_item"

- name: Attach disks
  shell: "qm set {{ vm_name[item.name] }} --scsihw virtio-scsi-pci --scsi1 local-lvm:vm-{{ vm_name[item.name] }}-disk-{{ inner_item.0 }}"
  loop: "{{ disks_with_int }}"
  loop_control:
    loop_var: "inner_item"
